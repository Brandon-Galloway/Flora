# PERENUAL API

type PlantDimensions {
    type: String
    min_value: Int
    max_value: Int
    unit: String
}

type PlantHardiness {
    min: Int
    max: Int
}

type PlantWateringInfo {
    value: String
    unit: String
}

type Plant @aws_api_key @aws_cognito_user_pools {
    id: ID!
    common_name: String
    scientific_name: [String]
    other_name: [String]
    family: String
    origin: [String]
    type: String @aws_cognito_user_pools(cognito_groups: ["Admin"])
    dimensions: PlantDimensions
    cycle: String
    attracts: [String]
    propagation: [String]
    hardiness: PlantHardiness
    watering: String
    watering_period: String
    watering_general_benchmark: PlantWateringInfo
    sunlight: [String]
    pruning_month: [String]
    growth_rate: String
    thorny: Boolean
    indoor: Boolean
    care_level: String
    flowers: Boolean
    flowering_season: String
    flower_color: String
    leaf: Boolean
    leaf_color: [String]
    poisonous_to_humans: Boolean
    poisonous_to_pets: Boolean
    description: String
}

# ACCUWEATHER API

type Reading {
    Value: Float,
    Unit: String,
    UnitType: Int,
    Phrase: String
}

type HourlyReading @aws_cognito_user_pools {
        DateTime: String,
        EpochDateTime: Int,
        WeatherIcon: Int,
        IconPhrase: String,
        HasPrecipitation: Boolean,
        IsDaylight: Boolean,
        Temperature: Reading,
        RealFeelTemperature: Reading,
        RealFeelTemperatureShade: Reading,
        WetBulbTemperature: Reading,
        DewPoint: Reading,
        RelativeHumidity: Int,
        IndoorRelativeHumidity: Int,
        UVIndex: Int,
        UVIndexText: String,
        PrecipitationProbability: Int,
        ThunderstormProbability: Int,
        RainProbability: Int,
        SnowProbability: Int,
        IceProbability: Int,
        TotalLiquid: Reading,
        Rain: Reading,
        Snow: Reading,
        Ice: Reading,
        CloudCover: Int,
        Evapotranspiration: Reading,
        SolarIrradiance: Reading,
    }

type SensorReading @aws_api_key @aws_cognito_user_pools {
    DeviceId: String!,
    Timestamp: Int!,
    SoilTemperature: Int!,
    SoilMoisture: Int,
    AirTemperature: Int!,
    Humidity: Int!,
    Light: Int!,
    VisibleLight: Int!,
    InfraredLight: Int!
}

type DeviceLocation {
    Lat: Float,
    Long: Float,
    LocationName: String,
    LocationKey: String
}

type DeviceConfiguration {
    DeviceId: String!,
    Nickname: String,
    BatteryLife: Int,
    Location: DeviceLocation
}

input PlantSearch {
    id: ID,
    name: String
}

input SensorDataSearch {
    DeviceId: String!,
    StartTimestamp: Int,
    EndTimestamp: Int
}

input DeviceSearch {
    DeviceId: String!
}

type Query {
    plants(where: PlantSearch!): [Plant] @aws_cognito_user_pools
    weather(location: ID!): [HourlyReading] @aws_cognito_user_pools
    readings(where: SensorDataSearch!): [SensorReading] @aws_api_key @aws_cognito_user_pools
    devices(where: DeviceSearch!): [DeviceConfiguration] @aws_api_key @aws_cognito_user_pools
}

input DeviceRegistrationInput {
    Nickname: String!,
    Lat: Float!,
    Long: Float!
}

type Mutation {
    registerDevice(device: DeviceRegistrationInput!): DeviceConfiguration @aws_api_key @aws_cognito_user_pools
}